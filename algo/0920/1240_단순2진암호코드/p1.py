import sys
sys.stdin = open('input.txt')

# 문제해결방법:
#       1. 세로N, 가로M의 길이의 암호코드 속에, 56개 길이의 암호를 찾는다.
#       2. 이 암호를 7bit씩 나누어 8부분으로 나누고
#       3. 패턴을 찾아 숫자로 바꾸고
#       4. 자릿수를 홀수 짝수로 나누어서
#       5. 홀수*3 + 짝수가 10으로 나누어 떨어지는지 숫자를 검증해서
#       6. 검증되면 결과값으로 홀수자리+짝수자리, 검증되지 않으면 0을 print한다.

pattern = {      # 암호 패턴, 뒤가 항상 1로 끝난다.
    '0001101': 0,
    '0011001': 1,
    '0010011': 2,
    '0111101': 3,
    '0100011': 4,
    '0110001': 5,
    '0101111': 6,
    '0111011': 7,
    '0110111': 8,
    '0001011': 9
}

TC = int(input())
for tc in range(1, TC + 1):
    N, M = map(int, input().split())
    string = []
    for n in range(N):  # 암호를 2차원 배열로 만들기
        string.append(input())

    for n in range(0, N):          # 암호의 y 위치 찾기
        if '1' in string[n]:
            break
    for m in range(M - 1, 0, -1):  # 암호의 x 위치 찾기
        if string[n][m] == '1':
            break
    y = n       # 암호 y위치
    x = m - 55  # 암호 x위치, 암호는 56개의 길이를 가진다.
    code = string[y][x: x + 56] # 암호 8개가 들어있는 문자열

    odd = 0     # 홀수 저장용
    even = 0    # 짝수 저장용
    for i in range(0, 8):  # 문자열 잘라서 8개의 암호코드를 찾는 과정
        temp = pattern[code[i * 7: i * 7 + 7]]
        if i % 2 == 0:  # 홀수 짝수 나누기
            odd += temp
        else:
            even += temp

    if (3 * odd + even) % 10 == 0:  # 결과 찾기
        print(f'#{tc} {odd + even}')
    else:
        print(f'#{tc} {0}')


# 0000000000000000000000000000000000000000000000000000000000000000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000011101101100010111011011000101100010001101001001101110110000000000
# 0000000000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000000000